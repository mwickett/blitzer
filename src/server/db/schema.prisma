generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  clerk_user_id String   @unique
  email         String   @unique
  username      String   @unique
  avatarUrl     String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")

  // Relationships
  games                  GamePlayers[]
  scores                 Score[]
  friendRequestsSent     FriendRequest[] @relation("FriendRequestsSent")
  friendRequestsReceived FriendRequest[] @relation("FriendRequestsReceived")
  friends1               Friend[]        @relation("User1Friends")
  friends2               Friend[]        @relation("User2Friends")
}

model FriendRequest {
  id         String              @id @default(uuid())
  senderId   String
  receiverId String
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now()) @map("created_at")
  updatedAt  DateTime            @default(now()) @map("updated_at")

  sender   User @relation("FriendRequestsSent", fields: [senderId], references: [id])
  receiver User @relation("FriendRequestsReceived", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

model Friend {
  id        String   @id @default(uuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now()) @map("created_at")

  user1 User @relation("User1Friends", fields: [user1Id], references: [id])
  user2 User @relation("User2Friends", fields: [user2Id], references: [id])

  @@unique([user1Id, user2Id])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Game {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now()) @map("created_at")
  endedAt    DateTime? @map("ended_at")
  isFinished Boolean   @default(false) @map("is_finished")
  winnerId   String?

  players GamePlayers[]
  scores  Score[]
}

model Score {
  id                 String   @id @default(uuid())
  gameId             String
  userId             String
  totalCardsPlayed   Int
  blitzPileRemaining Int
  createdAt          DateTime @default(now()) @map("created_at")

  game Game @relation(fields: [gameId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model GamePlayers {
  gameId String
  userId String

  game Game @relation(fields: [gameId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([gameId, userId])
}
