generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @default(uuid())
  email                  String          @unique
  clerk_user_id          String          @unique
  createdAt              DateTime        @default(now()) @map("created_at")
  updatedAt              DateTime        @default(now()) @map("updated_at")
  username               String          @unique
  avatarUrl              String?
  friends1               Friend[]        @relation("User1Friends")
  friends2               Friend[]        @relation("User2Friends")
  friendRequestsReceived FriendRequest[] @relation("FriendRequestsReceived")
  friendRequestsSent     FriendRequest[] @relation("FriendRequestsSent")
  games                  GamePlayers[]
  scores                 Score[]
  createdGuests          GuestUser[]     @relation("CreatedGuests")
}

model GuestUser {
  id               String        @id @default(uuid())
  name             String
  createdAt        DateTime      @default(now()) @map("created_at")
  createdById      String
  invitationSent   Boolean       @default(false)
  invitationSentAt DateTime?
  emailSent        String?
  createdBy        User          @relation("CreatedGuests", fields: [createdById], references: [id])
  games            GamePlayers[]
  scores           Score[]

  @@index([createdById])
}

model FriendRequest {
  id         String              @id @default(uuid())
  senderId   String
  receiverId String
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now()) @map("created_at")
  updatedAt  DateTime            @default(now()) @map("updated_at")
  receiver   User                @relation("FriendRequestsReceived", fields: [receiverId], references: [id])
  sender     User                @relation("FriendRequestsSent", fields: [senderId], references: [id])

  @@unique([senderId, receiverId])
}

model Friend {
  id        String   @id @default(uuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now()) @map("created_at")
  user1     User     @relation("User1Friends", fields: [user1Id], references: [id])
  user2     User     @relation("User2Friends", fields: [user2Id], references: [id])

  @@unique([user1Id, user2Id])
}

model Game {
  id         String        @id @default(uuid())
  createdAt  DateTime      @default(now()) @map("created_at")
  endedAt    DateTime?     @map("ended_at")
  isFinished Boolean       @default(false) @map("is_finished")
  winnerId   String?
  players    GamePlayers[]
  rounds     Round[]
}

model Round {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  gameId    String
  round     Int
  game      Game     @relation(fields: [gameId], references: [id])
  scores    Score[]

  @@unique([gameId, round])
  @@index([gameId])
}

model Score {
  id                 String     @id @default(uuid())
  userId             String?
  guestId            String?
  totalCardsPlayed   Int
  blitzPileRemaining Int
  createdAt          DateTime   @default(now()) @map("created_at")
  roundId            String
  updatedAt          DateTime   @default(now()) @map("updated_at")
  round              Round      @relation(fields: [roundId], references: [id])
  user               User?      @relation(fields: [userId], references: [id])
  guestUser          GuestUser? @relation(fields: [guestId], references: [id])

  @@index([userId])
  @@index([guestId])
}

model GamePlayers {
  id        String     @id @default(uuid())
  gameId    String
  userId    String?
  guestId   String?
  game      Game       @relation(fields: [gameId], references: [id])
  user      User?      @relation(fields: [userId], references: [id])
  guestUser GuestUser? @relation(fields: [guestId], references: [id])

  @@unique([gameId, userId], name: "gamePlayer_userId", map: "game_players_game_id_user_id")
  @@unique([gameId, guestId], name: "gamePlayer_guestId", map: "game_players_game_id_guest_id")
  @@index([userId])
  @@index([guestId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
